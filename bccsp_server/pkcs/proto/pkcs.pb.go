// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkcs.proto

package pkcs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type GetECKeyRequest struct {
	Ski                  []byte   `protobuf:"bytes,1,req,name=ski" json:"ski,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetECKeyRequest) Reset()         { *m = GetECKeyRequest{} }
func (m *GetECKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetECKeyRequest) ProtoMessage()    {}
func (*GetECKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{0}
}
func (m *GetECKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetECKeyRequest.Unmarshal(m, b)
}
func (m *GetECKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetECKeyRequest.Marshal(b, m, deterministic)
}
func (dst *GetECKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetECKeyRequest.Merge(dst, src)
}
func (m *GetECKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetECKeyRequest.Size(m)
}
func (m *GetECKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetECKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetECKeyRequest proto.InternalMessageInfo

func (m *GetECKeyRequest) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

type GetSecretValueRequest struct {
	Ski                  []byte   `protobuf:"bytes,1,req,name=ski" json:"ski,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSecretValueRequest) Reset()         { *m = GetSecretValueRequest{} }
func (m *GetSecretValueRequest) String() string { return proto.CompactTextString(m) }
func (*GetSecretValueRequest) ProtoMessage()    {}
func (*GetSecretValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{1}
}
func (m *GetSecretValueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSecretValueRequest.Unmarshal(m, b)
}
func (m *GetSecretValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSecretValueRequest.Marshal(b, m, deterministic)
}
func (dst *GetSecretValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretValueRequest.Merge(dst, src)
}
func (m *GetSecretValueRequest) XXX_Size() int {
	return xxx_messageInfo_GetSecretValueRequest.Size(m)
}
func (m *GetSecretValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretValueRequest proto.InternalMessageInfo

func (m *GetSecretValueRequest) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

type GetSecretValueReply struct {
	Value                []byte   `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSecretValueReply) Reset()         { *m = GetSecretValueReply{} }
func (m *GetSecretValueReply) String() string { return proto.CompactTextString(m) }
func (*GetSecretValueReply) ProtoMessage()    {}
func (*GetSecretValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{2}
}
func (m *GetSecretValueReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSecretValueReply.Unmarshal(m, b)
}
func (m *GetSecretValueReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSecretValueReply.Marshal(b, m, deterministic)
}
func (dst *GetSecretValueReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretValueReply.Merge(dst, src)
}
func (m *GetSecretValueReply) XXX_Size() int {
	return xxx_messageInfo_GetSecretValueReply.Size(m)
}
func (m *GetSecretValueReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretValueReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretValueReply proto.InternalMessageInfo

func (m *GetSecretValueReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GenerateECKeyRequest struct {
	MarshaledOid         []byte   `protobuf:"bytes,3,req,name=marshaledOid" json:"marshaledOid,omitempty"`
	Ephemeral            *bool    `protobuf:"varint,2,req,name=ephemeral" json:"ephemeral,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateECKeyRequest) Reset()         { *m = GenerateECKeyRequest{} }
func (m *GenerateECKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateECKeyRequest) ProtoMessage()    {}
func (*GenerateECKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{3}
}
func (m *GenerateECKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateECKeyRequest.Unmarshal(m, b)
}
func (m *GenerateECKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateECKeyRequest.Marshal(b, m, deterministic)
}
func (dst *GenerateECKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateECKeyRequest.Merge(dst, src)
}
func (m *GenerateECKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateECKeyRequest.Size(m)
}
func (m *GenerateECKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateECKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateECKeyRequest proto.InternalMessageInfo

func (m *GenerateECKeyRequest) GetMarshaledOid() []byte {
	if m != nil {
		return m.MarshaledOid
	}
	return nil
}

func (m *GenerateECKeyRequest) GetEphemeral() bool {
	if m != nil && m.Ephemeral != nil {
		return *m.Ephemeral
	}
	return false
}

type SignP11ECDSARequest struct {
	Ski                  []byte   `protobuf:"bytes,1,req,name=ski" json:"ski,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,req,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignP11ECDSARequest) Reset()         { *m = SignP11ECDSARequest{} }
func (m *SignP11ECDSARequest) String() string { return proto.CompactTextString(m) }
func (*SignP11ECDSARequest) ProtoMessage()    {}
func (*SignP11ECDSARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{4}
}
func (m *SignP11ECDSARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignP11ECDSARequest.Unmarshal(m, b)
}
func (m *SignP11ECDSARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignP11ECDSARequest.Marshal(b, m, deterministic)
}
func (dst *SignP11ECDSARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignP11ECDSARequest.Merge(dst, src)
}
func (m *SignP11ECDSARequest) XXX_Size() int {
	return xxx_messageInfo_SignP11ECDSARequest.Size(m)
}
func (m *SignP11ECDSARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignP11ECDSARequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignP11ECDSARequest proto.InternalMessageInfo

func (m *SignP11ECDSARequest) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *SignP11ECDSARequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type VerifyP11ECDSARequest struct {
	Ski                  []byte   `protobuf:"bytes,1,req,name=ski" json:"ski,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,req,name=msg" json:"msg,omitempty"`
	R                    []byte   `protobuf:"bytes,3,req,name=R" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,4,req,name=S" json:"S,omitempty"`
	ByteSize             *int32   `protobuf:"varint,5,req,name=byteSize" json:"byteSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyP11ECDSARequest) Reset()         { *m = VerifyP11ECDSARequest{} }
func (m *VerifyP11ECDSARequest) String() string { return proto.CompactTextString(m) }
func (*VerifyP11ECDSARequest) ProtoMessage()    {}
func (*VerifyP11ECDSARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{5}
}
func (m *VerifyP11ECDSARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyP11ECDSARequest.Unmarshal(m, b)
}
func (m *VerifyP11ECDSARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyP11ECDSARequest.Marshal(b, m, deterministic)
}
func (dst *VerifyP11ECDSARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyP11ECDSARequest.Merge(dst, src)
}
func (m *VerifyP11ECDSARequest) XXX_Size() int {
	return xxx_messageInfo_VerifyP11ECDSARequest.Size(m)
}
func (m *VerifyP11ECDSARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyP11ECDSARequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyP11ECDSARequest proto.InternalMessageInfo

func (m *VerifyP11ECDSARequest) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *VerifyP11ECDSARequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VerifyP11ECDSARequest) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *VerifyP11ECDSARequest) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *VerifyP11ECDSARequest) GetByteSize() int32 {
	if m != nil && m.ByteSize != nil {
		return *m.ByteSize
	}
	return 0
}

// The response message containing the greetings
type GetECKeyReply struct {
	Ecpt                 []byte   `protobuf:"bytes,2,req,name=ecpt" json:"ecpt,omitempty"`
	MarshaledOid         []byte   `protobuf:"bytes,3,req,name=marshaledOid" json:"marshaledOid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetECKeyReply) Reset()         { *m = GetECKeyReply{} }
func (m *GetECKeyReply) String() string { return proto.CompactTextString(m) }
func (*GetECKeyReply) ProtoMessage()    {}
func (*GetECKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{6}
}
func (m *GetECKeyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetECKeyReply.Unmarshal(m, b)
}
func (m *GetECKeyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetECKeyReply.Marshal(b, m, deterministic)
}
func (dst *GetECKeyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetECKeyReply.Merge(dst, src)
}
func (m *GetECKeyReply) XXX_Size() int {
	return xxx_messageInfo_GetECKeyReply.Size(m)
}
func (m *GetECKeyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetECKeyReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetECKeyReply proto.InternalMessageInfo

func (m *GetECKeyReply) GetEcpt() []byte {
	if m != nil {
		return m.Ecpt
	}
	return nil
}

func (m *GetECKeyReply) GetMarshaledOid() []byte {
	if m != nil {
		return m.MarshaledOid
	}
	return nil
}

type GenerateECKeyReply struct {
	Ski                  []byte   `protobuf:"bytes,1,req,name=ski" json:"ski,omitempty"`
	Ecpt                 []byte   `protobuf:"bytes,2,req,name=ecpt" json:"ecpt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateECKeyReply) Reset()         { *m = GenerateECKeyReply{} }
func (m *GenerateECKeyReply) String() string { return proto.CompactTextString(m) }
func (*GenerateECKeyReply) ProtoMessage()    {}
func (*GenerateECKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{7}
}
func (m *GenerateECKeyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateECKeyReply.Unmarshal(m, b)
}
func (m *GenerateECKeyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateECKeyReply.Marshal(b, m, deterministic)
}
func (dst *GenerateECKeyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateECKeyReply.Merge(dst, src)
}
func (m *GenerateECKeyReply) XXX_Size() int {
	return xxx_messageInfo_GenerateECKeyReply.Size(m)
}
func (m *GenerateECKeyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateECKeyReply.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateECKeyReply proto.InternalMessageInfo

func (m *GenerateECKeyReply) GetSki() []byte {
	if m != nil {
		return m.Ski
	}
	return nil
}

func (m *GenerateECKeyReply) GetEcpt() []byte {
	if m != nil {
		return m.Ecpt
	}
	return nil
}

type SignP11ECDSAReply struct {
	R                    []byte   `protobuf:"bytes,1,req,name=R" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,2,req,name=S" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignP11ECDSAReply) Reset()         { *m = SignP11ECDSAReply{} }
func (m *SignP11ECDSAReply) String() string { return proto.CompactTextString(m) }
func (*SignP11ECDSAReply) ProtoMessage()    {}
func (*SignP11ECDSAReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{8}
}
func (m *SignP11ECDSAReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignP11ECDSAReply.Unmarshal(m, b)
}
func (m *SignP11ECDSAReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignP11ECDSAReply.Marshal(b, m, deterministic)
}
func (dst *SignP11ECDSAReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignP11ECDSAReply.Merge(dst, src)
}
func (m *SignP11ECDSAReply) XXX_Size() int {
	return xxx_messageInfo_SignP11ECDSAReply.Size(m)
}
func (m *SignP11ECDSAReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SignP11ECDSAReply.DiscardUnknown(m)
}

var xxx_messageInfo_SignP11ECDSAReply proto.InternalMessageInfo

func (m *SignP11ECDSAReply) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *SignP11ECDSAReply) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type VerifyP11ECDSAReply struct {
	Valid                *bool    `protobuf:"varint,1,req,name=valid" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyP11ECDSAReply) Reset()         { *m = VerifyP11ECDSAReply{} }
func (m *VerifyP11ECDSAReply) String() string { return proto.CompactTextString(m) }
func (*VerifyP11ECDSAReply) ProtoMessage()    {}
func (*VerifyP11ECDSAReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_pkcs_49817dfe8deab70c, []int{9}
}
func (m *VerifyP11ECDSAReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyP11ECDSAReply.Unmarshal(m, b)
}
func (m *VerifyP11ECDSAReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyP11ECDSAReply.Marshal(b, m, deterministic)
}
func (dst *VerifyP11ECDSAReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyP11ECDSAReply.Merge(dst, src)
}
func (m *VerifyP11ECDSAReply) XXX_Size() int {
	return xxx_messageInfo_VerifyP11ECDSAReply.Size(m)
}
func (m *VerifyP11ECDSAReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyP11ECDSAReply.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyP11ECDSAReply proto.InternalMessageInfo

func (m *VerifyP11ECDSAReply) GetValid() bool {
	if m != nil && m.Valid != nil {
		return *m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*GetECKeyRequest)(nil), "pkcs.getECKeyRequest")
	proto.RegisterType((*GetSecretValueRequest)(nil), "pkcs.getSecretValueRequest")
	proto.RegisterType((*GetSecretValueReply)(nil), "pkcs.getSecretValueReply")
	proto.RegisterType((*GenerateECKeyRequest)(nil), "pkcs.generateECKeyRequest")
	proto.RegisterType((*SignP11ECDSARequest)(nil), "pkcs.signP11ECDSARequest")
	proto.RegisterType((*VerifyP11ECDSARequest)(nil), "pkcs.verifyP11ECDSARequest")
	proto.RegisterType((*GetECKeyReply)(nil), "pkcs.getECKeyReply")
	proto.RegisterType((*GenerateECKeyReply)(nil), "pkcs.generateECKeyReply")
	proto.RegisterType((*SignP11ECDSAReply)(nil), "pkcs.signP11ECDSAReply")
	proto.RegisterType((*VerifyP11ECDSAReply)(nil), "pkcs.verifyP11ECDSAReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PKCSClient is the client API for PKCS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PKCSClient interface {
	GetECKey(ctx context.Context, in *GetECKeyRequest, opts ...grpc.CallOption) (*GetECKeyReply, error)
	GenerateECKey(ctx context.Context, in *GenerateECKeyRequest, opts ...grpc.CallOption) (*GenerateECKeyReply, error)
	SignP11ECDSA(ctx context.Context, in *SignP11ECDSARequest, opts ...grpc.CallOption) (*SignP11ECDSAReply, error)
	VerifyP11ECDSA(ctx context.Context, in *VerifyP11ECDSARequest, opts ...grpc.CallOption) (*VerifyP11ECDSAReply, error)
	GetSecretValue(ctx context.Context, in *GetSecretValueRequest, opts ...grpc.CallOption) (*GetSecretValueReply, error)
}

type pKCSClient struct {
	cc *grpc.ClientConn
}

func NewPKCSClient(cc *grpc.ClientConn) PKCSClient {
	return &pKCSClient{cc}
}

func (c *pKCSClient) GetECKey(ctx context.Context, in *GetECKeyRequest, opts ...grpc.CallOption) (*GetECKeyReply, error) {
	out := new(GetECKeyReply)
	err := c.cc.Invoke(ctx, "/pkcs.PKCS/getECKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCSClient) GenerateECKey(ctx context.Context, in *GenerateECKeyRequest, opts ...grpc.CallOption) (*GenerateECKeyReply, error) {
	out := new(GenerateECKeyReply)
	err := c.cc.Invoke(ctx, "/pkcs.PKCS/generateECKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCSClient) SignP11ECDSA(ctx context.Context, in *SignP11ECDSARequest, opts ...grpc.CallOption) (*SignP11ECDSAReply, error) {
	out := new(SignP11ECDSAReply)
	err := c.cc.Invoke(ctx, "/pkcs.PKCS/signP11ECDSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCSClient) VerifyP11ECDSA(ctx context.Context, in *VerifyP11ECDSARequest, opts ...grpc.CallOption) (*VerifyP11ECDSAReply, error) {
	out := new(VerifyP11ECDSAReply)
	err := c.cc.Invoke(ctx, "/pkcs.PKCS/verifyP11ECDSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pKCSClient) GetSecretValue(ctx context.Context, in *GetSecretValueRequest, opts ...grpc.CallOption) (*GetSecretValueReply, error) {
	out := new(GetSecretValueReply)
	err := c.cc.Invoke(ctx, "/pkcs.PKCS/getSecretValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PKCSServer is the server API for PKCS service.
type PKCSServer interface {
	GetECKey(context.Context, *GetECKeyRequest) (*GetECKeyReply, error)
	GenerateECKey(context.Context, *GenerateECKeyRequest) (*GenerateECKeyReply, error)
	SignP11ECDSA(context.Context, *SignP11ECDSARequest) (*SignP11ECDSAReply, error)
	VerifyP11ECDSA(context.Context, *VerifyP11ECDSARequest) (*VerifyP11ECDSAReply, error)
	GetSecretValue(context.Context, *GetSecretValueRequest) (*GetSecretValueReply, error)
}

func RegisterPKCSServer(s *grpc.Server, srv PKCSServer) {
	s.RegisterService(&_PKCS_serviceDesc, srv)
}

func _PKCS_GetECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetECKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCSServer).GetECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkcs.PKCS/GetECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCSServer).GetECKey(ctx, req.(*GetECKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS_GenerateECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateECKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCSServer).GenerateECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkcs.PKCS/GenerateECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCSServer).GenerateECKey(ctx, req.(*GenerateECKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS_SignP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignP11ECDSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCSServer).SignP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkcs.PKCS/SignP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCSServer).SignP11ECDSA(ctx, req.(*SignP11ECDSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS_VerifyP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyP11ECDSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCSServer).VerifyP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkcs.PKCS/VerifyP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCSServer).VerifyP11ECDSA(ctx, req.(*VerifyP11ECDSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PKCS_GetSecretValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKCSServer).GetSecretValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkcs.PKCS/GetSecretValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKCSServer).GetSecretValue(ctx, req.(*GetSecretValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PKCS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkcs.PKCS",
	HandlerType: (*PKCSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getECKey",
			Handler:    _PKCS_GetECKey_Handler,
		},
		{
			MethodName: "generateECKey",
			Handler:    _PKCS_GenerateECKey_Handler,
		},
		{
			MethodName: "signP11ECDSA",
			Handler:    _PKCS_SignP11ECDSA_Handler,
		},
		{
			MethodName: "verifyP11ECDSA",
			Handler:    _PKCS_VerifyP11ECDSA_Handler,
		},
		{
			MethodName: "getSecretValue",
			Handler:    _PKCS_GetSecretValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkcs.proto",
}

func init() { proto.RegisterFile("pkcs.proto", fileDescriptor_pkcs_49817dfe8deab70c) }

var fileDescriptor_pkcs_49817dfe8deab70c = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x5d, 0x47, 0x72, 0x47, 0xe6, 0x6b, 0xd3, 0x08, 0xc7, 0x70, 0x88, 0x96, 0x8b, 0x11,
	0x52, 0x90, 0x39, 0x01, 0x37, 0x9a, 0x56, 0x48, 0xf4, 0x80, 0xb5, 0x96, 0x10, 0x37, 0x64, 0x9c,
	0xc1, 0xb5, 0xea, 0xd4, 0xcb, 0x7a, 0x5b, 0x61, 0xfe, 0x30, 0x7f, 0x03, 0xed, 0xda, 0x6e, 0x62,
	0x67, 0x23, 0x21, 0x6e, 0xf3, 0xc6, 0x6f, 0x9e, 0xe6, 0xcd, 0xcc, 0x1a, 0x80, 0x5f, 0x67, 0xf5,
	0x92, 0x8b, 0x4a, 0x56, 0xc4, 0x51, 0x31, 0x7d, 0x01, 0x8f, 0x72, 0x94, 0x17, 0xab, 0x4b, 0x6c,
	0x18, 0xfe, 0xbc, 0xc5, 0x5a, 0x92, 0xc7, 0x70, 0x5c, 0x5f, 0x17, 0xbe, 0xb5, 0xb0, 0x43, 0x8f,
	0xa9, 0x90, 0xbe, 0x84, 0x59, 0x8e, 0x32, 0xc1, 0x4c, 0xa0, 0xfc, 0x92, 0x96, 0xb7, 0x78, 0x98,
	0xfa, 0x0a, 0xa6, 0x63, 0x2a, 0x2f, 0x1b, 0x72, 0x0a, 0x93, 0x3b, 0x85, 0x3a, 0x6a, 0x0b, 0xe8,
	0x57, 0x38, 0xcd, 0xf1, 0x06, 0x45, 0x2a, 0x71, 0xd0, 0x01, 0x05, 0x6f, 0x93, 0x8a, 0xfa, 0x2a,
	0x2d, 0x71, 0xfd, 0xb9, 0x58, 0xfb, 0xc7, 0xba, 0x68, 0x90, 0x23, 0xcf, 0xe1, 0x04, 0xf9, 0x15,
	0x6e, 0x50, 0xa4, 0xa5, 0x6f, 0x2f, 0xec, 0xd0, 0x65, 0xdb, 0x04, 0x7d, 0x07, 0xd3, 0xba, 0xc8,
	0x6f, 0xe2, 0x28, 0xba, 0x58, 0x9d, 0x27, 0x1f, 0x0e, 0xf6, 0xab, 0x32, 0x9b, 0x3a, 0xd7, 0x02,
	0x1e, 0x53, 0x21, 0xad, 0x61, 0x76, 0x87, 0xa2, 0xf8, 0xd1, 0xfc, 0x47, 0x31, 0xf1, 0xc0, 0x62,
	0x5d, 0xbb, 0x16, 0x53, 0x28, 0xf1, 0x9d, 0x16, 0x25, 0x24, 0x00, 0xf7, 0x7b, 0x23, 0x31, 0x29,
	0x7e, 0xa3, 0x3f, 0x59, 0xd8, 0xe1, 0x84, 0xdd, 0x63, 0xfa, 0x11, 0x1e, 0x6c, 0xd7, 0xa0, 0x06,
	0x46, 0xc0, 0xc1, 0x8c, 0xcb, 0x4e, 0x5b, 0xc7, 0xff, 0x32, 0x16, 0xfa, 0x1e, 0xc8, 0x68, 0xa4,
	0x4a, 0x6d, 0xbf, 0x75, 0x83, 0x3e, 0x7d, 0x0d, 0x4f, 0x86, 0x43, 0x53, 0xa5, 0xda, 0x91, 0x35,
	0x70, 0x64, 0x77, 0x8e, 0xd4, 0xb2, 0xc7, 0xa3, 0xda, 0x2e, 0xbb, 0x58, 0xeb, 0x32, 0x97, 0xb5,
	0xe0, 0xcd, 0x1f, 0x1b, 0x9c, 0xf8, 0x72, 0x95, 0x90, 0xb7, 0xe0, 0xf6, 0x5e, 0xc9, 0x6c, 0xa9,
	0x2f, 0x72, 0x74, 0x82, 0xc1, 0x74, 0x9c, 0xe6, 0x65, 0x43, 0x8f, 0x88, 0x9e, 0xd2, 0x8e, 0x39,
	0x12, 0xf4, 0xbc, 0xfd, 0x23, 0x0a, 0x7c, 0xe3, 0xb7, 0x56, 0xe8, 0x1c, 0xbc, 0x5d, 0xa7, 0x64,
	0xde, 0x72, 0x0d, 0x27, 0x13, 0x3c, 0x35, 0x7d, 0x6a, 0x55, 0x3e, 0xc1, 0xc3, 0xa1, 0x7d, 0xf2,
	0xac, 0x25, 0x1b, 0xef, 0x27, 0x98, 0x9b, 0x3f, 0xde, 0x6b, 0x0d, 0xdf, 0x4d, 0xaf, 0x65, 0x7c,
	0x78, 0xbd, 0x96, 0xe1, 0xa9, 0xd1, 0xa3, 0xb3, 0x10, 0xe6, 0x45, 0xb5, 0xcc, 0x05, 0xcf, 0x34,
	0x2b, 0x8a, 0xbe, 0x71, 0x51, 0xfd, 0x6a, 0x34, 0x38, 0x3b, 0x51, 0x3b, 0x88, 0xd5, 0x1f, 0x20,
	0xb6, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x51, 0x2d, 0x6d, 0xfe, 0x10, 0x04, 0x00, 0x00,
}
